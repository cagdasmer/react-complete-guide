spread : add new elements to an existing entity (list, object properties, etc.)
rest ~= **args

Destructuring : extracting elements
	Array : [a,b] = ['Gi', 'There']
	Object : {name} = {name: 'Max', age:26} (age is undefined)
	
____________REACT________________
return (
      // This isn't actually HTML, it's JSX
          // className instead of class because this still is a JS file
      <div className="App">
        <h1>Hi, I'm a React App</h1>
      </div>
    );
	
// The above code block will converted to the line below
                            // type    props              // content
    # return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Hi I\'m Anan React App'));

JSX must contain one root element. (e.g. <div> ... </div>) (possible to work around)
 When returning JSX, {} (dynamic output) can only contain a single line to be interpreted. (Statement, function call, etc.)
 When using a custom component/element, any properties that are passed can be accessed with (props) argument. 
 props.children => represents everything passed between the element tags
 
  The workaround
	Opt. 1: Wrap elements in square brackets and return the elements as an array : return [ <tag1></tag1>, <tag2></tag2> ]
	Opt. 2: hoc: Higher Order Components that wrap other components. An empty wrapper that uses the special children propery
		Hoc Creation:
			1. const aux = props => props.children;
			2. 
		
		hoc doc : https://reactjs.org/docs/higher-order-components.html
		
	Opt. 3: wrap with <React.Fragment></React.Fragment> (technically the same with Aux)

Props allow you to pass data from a parent (wrapping) component to a child (embedded) component. (methods also can be passed as reference)
State objects are only managed inside a component. Managed properties can be of any type
 State is used to change the component, well, state from within
 You can of course pass the state down to functional components, but these then can't directly edit it.
 !!!Only changes in props  and/ or state trigger React to re-render your components and potentially update the DOM in the browser!!!
 !!!setting a state is perfectly ok unless the changes to be made depend on another state!!! Ex: incrementing a variable
   |___> In the above case, use setState like the following: this.setState( (prevState, props) =>{
																return {};
															})
 
When setting a function as a property, don't add () since it calls the function

Good practice to use as many stateless components as possible. If every components manages state, every compononent manages everything. (Spaghetti code)

Use ternary conditionals instead of if-else

Radium supports all pseudo selectors
	Wrap the entire application in the root component with <StyleRoot> to use advanced features of Radium. (Pseudo-selectors excluded)
	
CSS Modules - Enables scoping css files to individual components prevent other components from being overwritten
	!! shouldn't manually add packages to node modules since it will be overwritten when "npm install" is run
	
	Option 1.
(  npm run eject ==> It moves create-react-app’s configuration files and dev/build/test scripts into your app directory. 
                    If you don’t have a need to modify the config or scripts you don’t need to eject. Doing so will prevent you from being able to update to new versions of create-react-app. )
					
	Option 2. (Easier)
	https://facebook.github.io/create-react-app/docs/adding-a-css-modules-stylesheet
	  More Info : https://github.com/css-modules/css-modules
	
	
	usage : import moduleName from 'dir/myCss.css';
			<tag style = {moduleName.className} > content </tag> ==> module's properties are the same names as class names 
													in the CSS file 
													
Components
	Components that manage the state shouldn't be involved with UI rendering too much ~= render should contain too much JSX
	If there is a single statement in an arrow function, the body can start with a return statement
	When calling a function from a sub-component, parent comp. should send the functions as a property. click = 
		this.clickHandler()
	  The sub-component should call the function in the following form : click = {() => props.click()}
	atm. we can't hardcode JSX elements without a root element, but lists can be returned
	
	When a local variable is defined in a component, don't define a property with the same name. The local variable will 	
	also be overwritten
	
	A stateful component (container) does not automatically mean a class component.
	Presentational Component = Stateless Compononent
	
  Class-based vs Functional Components
	It's not guaranteed that every react-app will use latest ver. of React, so better practice to stick to the conventional.
	If a prop is passed into a class, it can be accessed with this.props.propName
	Lifecycle hooks have nothing to do with React Hooks!
	
Component Lifecycle
	Creation
		- constructor(props) ==> Default ES6 feature. If used, super(props) should be called.
		- getDerivedStateFromProps(props, state) ==> Whenever props change, sync your state. (Very rare, won't be used a lot)
			Don't http requests from here
		- render() ==> Prepare & Structure JSX Code.
		   |__> Render child components (within JSX)
		-!! componentDidMount() ==> Do cause side-effects here. DON'T update the state as it triggers re-render!!
			THIS DOES NOT MEAN REAL DOM WILL RE-RENDERED! INTERNAL VIRTUAL DOM WILL BE RE-RENDERED AND CHECK FOR CHANGES
			  The same rule applies to FUNCTIONAL COMPONENTS (RETURNED JSX)
		
		Some of the lifecycle hooks were rarely used and could be used incorrectly, they will be removed in the future.
			ex: componentWillMount() ==> prepare your state (getDerived...)
		
	
	Update
		- getDerivedStateFromProps(props, state) ==> Very rarely used. Used to initalize state of a component that 
			updates, based on the props received. Ex: Form Control, handle request internally.
		-!! [Class | bool] shouldComponentUpdate(nextProps, nextState) ==> May cancel an update! (Performance purposes)
												Should be used carefully: blocking an update may break a component(s)
		- render() ==> Contructs its virtual DOM to if the real DOM needs to be updated
		   |__> Update Child Component Props
		   
		- getSnapshotBeforeUpdate(prevProps, prevState) ==> takes the previous props and state to use for last minute DOM operations. (Not modification. Ex: Get last scroll position to get back to it after an update)
		 
		-!! componentDidUpdate() ==> Done with updating, render has been executed. Do cause side-effects here. 
			Don't http requests from here, could cause an update loop triggering re-render. Used a lot!
			
		Legacy hook ex: componentWillReceive(props) ==> used for updating internal state. Could easily be used incorrectly
		
		React.memo : stores a snapshot of the component, only if the input changes it will re-render it
		
		How React Updates The DOM
			- render()
			- Compare DOMS for difference: Old Virtual DOM vs Re-rendered Virtual DOM (Faster than Real DOM)
			- Update Real DOM ==> Change only the places where differences were detected
				Virtual DOM : DOM representation in JavaScript
			    Keep interaction with the real DOM to a minimum
		
	When to optimize ?
		- Is the component part of a parent component that could change something that does not affect itself ?
			If that is the case, optimize.
			
	   Pure Components : use where you wanna check all props that matter to a component for difference
			- is just a normal component that already implements shouldComponentUpdate with complete props check !!!
		
	Clean up 
		- componentWillUnmount()
		
	
PropTypes 
	- improve the way to receive props. Ex: be more clear about which prop the component uses
		Throw an error if an incompatible type is received. 
	# npm install --save prop-types
	Syntax: 
		ClassName.propTypes = { 
			[propName]: PropTypes.[type] // clicked = PropTypes.func
		};
		
	doc: https://reactjs.org/docs/typechecking-with-proptypes.html

PropChain : can help prevent overly long chain of passing props
	UseCase - Auth Status
	
		
Refs : Can be passed into any propery ( like key )
	-	A function is passed to the ref property. (Can be an anonymous arrow function) 
	Ex : componentDidMount(){
			this.inputElement.focus();
		}
				// inputElement will be equal to the last input field (inputEl)
		ref = {(inputEl) => {this.inputElement = inputEl}}
		
	doc : https://reactjs.org/docs/refs-and-the-dom.html
		
Context API: Helps solve Prop Chain problem
	- A globally (or where we specify) available JavaScript object. (Could also be an array, string, number etc.)
	- We can initialize our context with a default value.
	
	Option 1.
		Syntax - Class:
			const contextName = React.createContext({ ...initial values... }); (provides better auto completion)
	
		Syntax - Usage: 
			Parent | wrap with <AuthContext.Provider  
									value = { ...values...} > ==> gives a provider JSX component on this authContext object
																Now the object can be accessed within the child components 
			Children | wrap the JSX with <AuthContext.Consumer>
							{(context) => <button onClick = {context.login}>Log in</button>}
	
	Option 2. (only in class-based components)
		- static contextType = AuthContext (mandatory) ==> can be accessed from outside without the need to instantiate
		- then the context can be accessed with " this.context "
		
	Option 3. (only in functional components)
		- useContext() hook
		Syntax:
			const authContext = useContext(AuthContext) ==> React makes the connection behind the scenes

						
				
Debugging
	When debugging from Chrome, the actual bundled code is different from our code. But Chrome provides this capability.
  Error Boundary
	componentDidCatch : receives potential errors and some additional information passed into automatically by React
	It's executed when the component wrapped with an Error Boundary throws an error.
	Only use error boundaries when it makes sense !!
	
	A key has to be on an outer element in a map method.
__________________________________________________________________________________________________________________________________________________


Http / Ajax - AXIOS 
	If multi-page, nothing special. Submit a form, send request, get a new HTML/React page back (no coupling)
	
	If single page, strong differentation between the front-end and the back-end.
		- React app and the server still need to communicate from time to time:
			Requests for JSON data. (Not HTML exchange !!)
			Server is typically a RESTful API, exposing API endpoints to send requests

	Sending Requests:
		Opt. 1 : JavaScript XMLHttpRequest (cumbersome)
			Construct your own request and handle the response
		Opt. 2 : Axios (3rd party JavaScript package)
			axios.get('https://url/posts', configuration?) ==> get request (Asynchronous)
			axios.post('https://url/posts', postData) => post request
			axios.delete('https://url/posts/' + id) => delete request
			
			// These are global
			axios.interceptors.request.use(requestCfg => {
					console.log(requestCfg);
					// Edit request config
					return requestCfg; // always return the config
				}, error => {
					console.log(error);
					return Promise.reject(error); // return it to forward to our error handler
				});							// Useful if there are seperate local & global tasks for errors
			);
	
			axios.interceptors.response.use(responseCfg => {
					...
				}, error => {
					...
				});
			
				// Remove an interceptor
			var myInterceptor = axios.interceptors.request.use(function () {/*...*/});
			axios.interceptors.request.eject(myInterceptor);
			
			axios.defaults.baseUrl = 'https://url.com' ==> set the base url for axios methods
			axios.defaults.headers.common['Authorization'] = 'AUTH TOKEN'; ==> set the default header for requests
			
			// These are local
			axios.js => assumes the default and overwrites
				const instance = axios.create({
					baseURL: 'https://jsonplaceholder.typicode.com'
				});
				instance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';
				

	
	promise (ES6): a default JavaScript object
		.then(response => {..code..}) : takes a function as input, which is executed once the promise resolves.
		.catch(error => {..code..}) : catch errors
		
	
	Handling errors locally makes sense because we can change the output depending on the result
	If something needs to be executed globally, use axios interceptors ↑↑
	
	When dynamically showing an output, the changing data is a side-effect. Need to re-render
	

Routing
	We don't have different files, simply re-render parts off that single page or 
		the entire single page depending on which the user navigated to
		(also no reloads, instead re-render)
								
								Router Package
		Parse URL/ Path ===> Read Config ===> Render / Load Appropriate JSX
		
		To use routing features;
			wrap everything in the app which should be able to use routing, with the related router component (ex: <BrowserRouter>)
			
		<Route path="/" .... /> => do something according to the current path. This form checks for the prefix.
						  \\__>render={() ==> <h1>Tactical Joker</h1>} ==> simplest form. 
						  \\__>component={importedComponent/function}
			<Route path="/" exact .... /> ==> matches the exact path
			
		Can use routes in the same page as many times as necessary!!
		
		<Link to = .... > Home </Link>	(instead of <a>)
					 \\__> to = "/" ==> Simplest form
					 \\__> to = {...JS Object...} ----> Ex: to 	<Link to={{  ==> Advanced form
																	  pathname: '/new-post',
																	  hash: '#submit' ==> jump to ID
																	  search: '?quick-submit=true'
																	}}
		When we click a link, our state is contained since the application does not reload!!
		
  Route-Related Props : react-router gives extra information about the loaded route
		- history
		- location : searchparams, hash, etc.
		- match : gives information about the matched request. (path, matched url, params, isExact?)
		
  withRouter HOC & Route Props
		- When we don't want get the prop information from  within containers
	  
_________________________________________________________________________________________________________________________________________________________

Redux
	INTRO
		Third party library for state management. Totally independent from React.
		Helps state management, makes handling props easier
		States concerns what you see on the screen
		Sharing a state between two entirely different components is very complex.
		React's reactivity system doesn't react to defined global variables. That's why a global variable can't be 
			defined for state. ==> That's what REDUX is for!!
			
	REDUX FLOW : provides a certain way of managing data that can be integrated into the React app via another package.
		- Central Store: Stores entire application state.
		
		- Component: Wants to manipulate app state, but doesn't do that by directly manipulating the central store.
				It would never be possible to determine where the change that broke the application was made.
				Need to have a clear, predictable process for updating the state.
				
		- Action : Dispatched from JavaScript within components.
			An information package with a type (addIngredient, removeIngredient) and a payload (which ingredient)
			Does not direcly reach the store!, doesn't hold any logic!, doesn't know how to update the store!
			
		- Reducers (combinable) : one root reducer that is directly connected to the Central store
			Reducer can check the type of the action it receives, then define and execute the behavior for that type of action. Then output the updated state (replaces the old state with a new state. new state can be based on the old one) (spread, never mutate)
			SYNCHRONOUS CODE ONLY - input in, output out, nothing in between, no delay
			The reducer is strongly connected to the store since it's the only thing that can update the state.
			
		- (Auto.) Subscription : Get the updated state back into the component in the form of Props
		
		ACTION TYPE IS A UNIQUE IDENTIFIER OF OUR CHOICE. Convention: ALL UPPERCASE, descriptive
		Can add any property after defining the type (name, id, value, etc. or just a payload object)
		
	
React-Redux : allows to hook up the redux store to the React application 
	Store should be created right before or when the application starts. { createStore }
	Reducers' logic is stored into their own components, since there are a lot of code for different types of actions
	
	<Provider store={store}> (wrap with) ==> a helper component that allows to inject our store into the react components
	
	Subscription is setup inside the container in which we want to access the store by using;
	{ connect } => a function that returns a HOC that we use on the export
		Usage: connect(..conf..)(Component) ==> send configuration and execute the returned HOC 
			conf:
				1. The part of the whole app. state we are interested in
				2. Actions to be dispathced


__________________________________________________________________________________________________________________________________________________
HOOKS
	- useState() ==> allows to change state from a function
		always returns an array with 2 elements. (previous state, function that allows to update the state)
	With hooks, old state and new state are not merged. Instead there is replacement. So need to manually make sure all data is passed
	
	- useEffect() ==> combines the functionality of all class-based lifecycle hooks with React Hooks.
		Will execute for every render cycle of the component (Create, Update, Delete etc.)
		componentDidMount & componentDidUpdate combined in one effect. (not getDerivedStateFromProps)
		
			AS componentDidMount : useEffect(()=>{}, []); ==> give an empty array as the second argument
			AS componentWillUnmount : useEffect(()=>{ return () => { [cleanup] }; }, []); ==> return a cleanup func.
				Runs nefore BEFORE the main useEffect func., AFTER first render cycle
		Possible to define multiple useEffect fucntions
		
		doc: https://reactjs.org/docs/hooks-effect.html
		
	- useRef() ==> enables the use of refs for functional components
	- useContext() ==> enables access to the context
