Automated Tests
	- Run automatically, each testing a fraction of the app
	- If a change made in the application breaks anything, helps find it
		The test might be adjusted to the new feature, or the new feature might be adjusted to the test 
		
Need two tools to write good tests and be able to test our react app.
   1. Test Runner: Responsible for executing the tests
		- Run the code, test it, provide a validation library 
	  Jest: Popular JS testing tool, not limited to React
	
!! Unit tests don't run in the browser, but instead with NodeJS. 
   But often emulated to be in a browser environment with the help of JS packages. !!
!! React app already comes with pre-configured test-environment.

   2. Testing Utilities : Simulates the React app, mounting the components and allowing to dig into the DOM
     React Test Utils : the official utility tool
	 Enzyme : developed by AirBnb
	
What not to Test ?
	- The library (axios, redux)	
	- Complex connections (click one component, change the other)
		Don't need to test if react can emit an event and send a prop
	
What to Test ?
	- Test the code that does not use the library
	- If a button click triggers a specific prop, 
		or if a change in data leads to a different result being rendered
	- Isolated tests
		Reducer function, component function
		
	- Conditional outputs
		What happens when a property changes, does it affect the output correctly
		
		Docs - https://jestjs.io/docs/en/getting-started
	
Test file names ==> fileName.test.js
	jest looks for the extension ↑↑
	
  jest provides an assertion library
	- expect : pass the value to be validated, and use one of the provided methods
		expect(value).method()
		expect.any() ==> compares object type
		
  Watch mode : 
    - yarn test --watch
	
___________________________________

Snapshot Testing (for Components) : Allows to track changes to data over time
  What we are concerned with?
	- What renders under what situation (ex. passing different props)
	  !! No typing JSX
	- Test components under user interaction 
	
  How do we virtually render components ?
    Need a way to figure out what JSX comes back, accessing via code
	
  - react-test-renderer : allows to render components inside JSX code
		Two types of rendering:
			. ReactShallowRenderer(Shallow Rendering) : Not worried about user interaction or lifecycle events
			. Full DOM REnderer : Also renders child components
			
	  expect(value).toMatchSnapshot : compares two snapshots
		after first run., creates a snapshot under __snaphots__  ( should not edit them )
		the following runs will compare with the initial snapshot.
		if the changes in the failed snapshot test is intended, update with ==> yarn test --u
		
      !! These are practically all the features for the react-test-renderer.
	    Not enough because we need complex testing. (Like clicking buttons, etc.) !!
		
  - Enzyme 
	
	  Should be added for a specific version of React to reduce size & unnecessary features
	  Also need request animation frame
	  
	  $ yarn add enzyme@3.0.0 enzyme-adapter-react-16@1.0.0 raf@3.3.2
	  $ yarn add enzyme-to-json@3.0.1 // we don't need snapshot intervals, just the rendered output
		  Syntax: 
			expect(toJSON(wrapper).toMatchSnapshot();
			  or
			add to jest.config.json :
				"snapshotSerializer": ["enzyme-to-json/serializer"]
	  
	  Additional setup:
		- src/tests/setupTests.js : allows to configure the test environment
			. import enzyme & enzyme adapter
			. call a single method to wire-up enzyme
				Enzyme.configure({
					adapter: new Adapter()
				});
			
		- <rootDir> jest.config.json 
			content : {
						"jest": {
							"setupFilesAfterEnv": [
								"raf/polyfill", 
								"<rootDir>src/setupTests.js"
							]
						}
					}
		- package.json : scripts :{
							"test": "jest --config=jest.config.json"
						}
					!! When using the --config option, the jest config JSON file must not contain a "jest" key:
		
		docs: https://airbnb.io/enzyme/docs/api/
		
Component Testing  
  We actually want to test the unconnected version (not the one with export default connect(...))because we want to set up dynamic props.
  We don't want these props to come from the store, we provide them directly
  
  !!!Snaphots hold seperate exports for all tests than work with a snapshot
  
Mocking Libraries : use fake data instead of using a remote resource
  Usage: 
	1. create a __mocks__ directory under your module (ex: tests)
	2. create a file with the same name as the file or library you want to mock (moment.js)
	3. include the library you want to use with : 
			const moduleName require.requireActual('moduleName')
		when you use the library under tests module, the mocked version will be used

		docs: https://jestjs.io/docs/en/manual-mocks
		
Test User Interaction
	wrapper can be used get items with tags, id, classname etc. (Much like in jQuery)
	Can check the state of a component by getting its state with the wrapper
	When multiple elements are returned, can use .at(index) or other comps.
	
		docs: https://airbnb.io/enzyme/docs/api/ShallowWrapper/simulate.html
			https://airbnb.io/enzyme/docs/api/ShallowWrapper/state.html
			
  Test Mocked Functions - Spies
	Goal is to create fake functions to make assertions. (Ex: was it called, how many times?)
	Syntax:
		const yourSpy = jest.fn(); // no arguments
		
	Can access a component's props with enzyme: wrapper.find('component').props()
												wrapper.find('component').prop('onPropName')(args);
		
		docs: https://jestjs.io/docs/en/expect#tohavebeencalled, times, with, etc. 
		
	Using MapDispatchToProps makes it easier to test components that dispatch an action
	
	eliminate duplicate lines in testcases with: afterAll(),afterEach(),beforeAll(), etc.